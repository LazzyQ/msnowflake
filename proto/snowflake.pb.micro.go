// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/snowflake.proto

package msnowflake

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for MSnowflake service

type MSnowflakeService interface {
	NextId(ctx context.Context, in *IdRequest, opts ...client.CallOption) (*IdResponse, error)
	NextIds(ctx context.Context, in *IdRequest, opts ...client.CallOption) (*IdResponse, error)
}

type mSnowflakeService struct {
	c    client.Client
	name string
}

func NewMSnowflakeService(name string, c client.Client) MSnowflakeService {
	return &mSnowflakeService{
		c:    c,
		name: name,
	}
}

func (c *mSnowflakeService) NextId(ctx context.Context, in *IdRequest, opts ...client.CallOption) (*IdResponse, error) {
	req := c.c.NewRequest(c.name, "MSnowflake.NextId", in)
	out := new(IdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mSnowflakeService) NextIds(ctx context.Context, in *IdRequest, opts ...client.CallOption) (*IdResponse, error) {
	req := c.c.NewRequest(c.name, "MSnowflake.NextIds", in)
	out := new(IdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MSnowflake service

type MSnowflakeHandler interface {
	NextId(context.Context, *IdRequest, *IdResponse) error
	NextIds(context.Context, *IdRequest, *IdResponse) error
}

func RegisterMSnowflakeHandler(s server.Server, hdlr MSnowflakeHandler, opts ...server.HandlerOption) error {
	type mSnowflake interface {
		NextId(ctx context.Context, in *IdRequest, out *IdResponse) error
		NextIds(ctx context.Context, in *IdRequest, out *IdResponse) error
	}
	type MSnowflake struct {
		mSnowflake
	}
	h := &mSnowflakeHandler{hdlr}
	return s.Handle(s.NewHandler(&MSnowflake{h}, opts...))
}

type mSnowflakeHandler struct {
	MSnowflakeHandler
}

func (h *mSnowflakeHandler) NextId(ctx context.Context, in *IdRequest, out *IdResponse) error {
	return h.MSnowflakeHandler.NextId(ctx, in, out)
}

func (h *mSnowflakeHandler) NextIds(ctx context.Context, in *IdRequest, out *IdResponse) error {
	return h.MSnowflakeHandler.NextIds(ctx, in, out)
}
